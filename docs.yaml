openapi: 3.0.3
info:
  title: ServerSeeker API docs
  description: "**Click [here](https://discord.com/api/oauth2/authorize?client_id=1087083964432404590&redirect_uri=https%3A%2F%2Fapi.serverseeker.net%2Fdiscord_callback&response_type=code&scope=identify) to get your API key**.
                If you want to get the api_key locally, simply start a server on the port 7637. 
                [This](https://discord.com/api/oauth2/authorize?client_id=1087083964432404590&redirect_uri=http%3A%2F%2F127.0.0.1%3A7637%2F&response_type=code&scope=identify)
                link will redirect to the callback on 127.0.0.1:7637, and you can get the code as a GET parameter.
                To trade this code for an API key, see below. 
                Info: Instead of passing the API key in the body, you can also pass it as a bearer token in a header. (Authorization: Bearer your_api_key)
                Hint: A successful query ALWAYS return 200. If it is unsuccessful, it will ALWAYS return a description of the error in the body ({\"error\": \"error message\"}).
                Every query might return an unexpected 500 error. If this happens, please contact us on our [discord server](https://discord.gg/jVyHyYbqdS).  
                "
  version: 1.0.0
  termsOfService: https://github.com/DAMcraft/ServerSeeker-TOS
externalDocs:
  description: Official discord support server
  url: https://discord.gg/jVyHyYbqdS
servers:
  - url: https://api.serverseeker.net
paths:
  /discord_callback:
    get:
      summary: The callback for the discord oauth2
      description: "This is the callback for the discord oauth2. It will redirect you to the page where you can get your API key. Do **NOT** call this endpoint manually. It is solely for the discord oauth2."
      parameters:
        - name: code
          in: query
          description: The code you get from discord
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                type: object
                properties:
                  api_key:
                    type: string
                    description: Your API key
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
  /get_token:
    post:
      summary: Trade a code for an API key
      description: "
      **This is only necessary if you want to get the API key locally. To get the API key as a \"normal\" user, see at the beginning of the docs.**"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: The code you got from discord
              required:
                - code
            example:
              code: "The code given by discord"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_key:
                    type: string
                    description: Your API key
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
  /user_info:
    post:
      summary: Get information about your account
      description: "Gives you information about your account (user id, username, avatar url)"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                api_key:
                  type: string
                  description: your api key
              required:
                - api_key
              example:
                api_key: "your api key"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                    description: Your user id
                  username:
                    type: string
                    description: Your username
                  avatar_url:
                    type: string
                    description: Your avatar url
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                      type: string
                      description: The error message
  /whereis:
    post:
      summary: Search where a player was
      description: "Gives you a list of servers where a player was. Limited to 1000 results. **Attention: You must use name OR uuid as your parameter, not both!**"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                api_key:
                  type: string
                  description: your api key
                name:
                  type: string
                  description: "The name of the player. Attention: You can only use name OR uuid, not both!"
                uuid:
                  type: string
                  description: "The uuid of the player. Attention: You can only use name OR uuid, not both!"
              required:
                - api_key
                - name OR uuid
              example:
                api_key: "your api key"
                name: "DAMcraft (attention: you can only use name OR uuid, not both!)"
                uuid: "68af4d98-24a2-41b6-96bc-a9c2ef9b397b (attention: you can only use name OR uuid, not both!)"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        server:
                          type: string
                          description: The ip:port where the player was
                        uuid:
                          type: string
                          description: The uuid of the player
                        name:
                          type: string
                          description: The name of the player+
                        last_seen:
                          type: integer
                          description: The unix timestamp when the player was last seen on this server
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                      type: string
                      description: The error message
        "429":
          description: Too many requests in the last 24 hours
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
        "504":
          description: Query took too long to execute and timed out
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
  /servers:
    post:
      summary: Search for servers
      description: "Gives you a list of servers (with matching criteria). Limited to 128 results."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                api_key:
                  type: string
                  description: your api key
                online_players:
                  description: "The amount of online players you want.
                    Type is a range of numbers [min, max] or a single number for exact match.
                    max can be 'inf' to indicate no upper bound."
                  oneOf:
                    - type: integer
                    - type: array
                      items:
                        oneOf:
                          - type: integer
                          - type: string
                            pattern: ^inf$
                      minItems: 2
                      maxItems: 2
                max_players:
                  description: "The max amount of players players the server should be able to hold.
                    Type is a range of numbers [min, max] or a single number for exact match.
                    max can be 'inf' to indicate no upper bound."
                  oneOf:
                    - type: integer
                    - type: array
                      items:
                        oneOf:
                          - type: integer
                          - type: string
                            pattern: ^inf$
                      minItems: 2
                      maxItems: 2
                cracked:
                  type: boolean
                  description: "If the server should be cracked or not"
                protocol:
                  type: integer
                  description: "The protocol version of the server (see https://wiki.vg/Protocol_version_numbers)"
                online_after:
                  type: integer
                  description: "The server should have been online after this unix timestamp. Defaults to showing all servers which were online at last ping. **Set to 0 to show all servers**"
                software:
                  enum: ["any", "vanilla", "paper", "spigot", "bukkit"]
                  description: "The software the server is running on. (any, vanilla, paper, spigot, bukkit)"
                  type: string
              required:
                - api_key
            example:
              api_key: "your api key"
              online_players: [5, "inf"]
              max_players: 20
              cracked: true
              protocol: 763
              software: "paper"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        server:
                          type: string
                          description: The ip:port of the server
                        cracked:
                          type: boolean
                          description: If the server is cracked or not (null if unknown)
                        description:
                          type: string
                          description: The description of the server
                        online_players:
                          type: integer
                          description: The amount of online players
                        max_players:
                          type: integer
                          description: The max amount of players the server can hold
                        protocol:
                            type: integer
                            description: The protocol version of the server
                        last_seen:
                          type: integer
                          description: The unix timestamp when the server was last seen online
                        version:
                          type: string
                          description: The version of the server
                      example:
                        server: "181.75.128.9:8185"
                        cracked: false
                        description: "\u00a7rA Minecraft Server\u00a7r"
                        last_seen: 1686105138
                        max_players: 20
                        online_players: 1
                        protocol: 760
                        version: "Paper 1.19.2"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                      type: string
                      description: The error message
        "429":
          description: Too many requests in the last 24 hours
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
        "504":
          description: Query took too long to execute and timed out
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
  /server_info:
    post:
      summary: Get info about a server
      description: "Gives you info about a server."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                api_key:
                  type: string
                  description: your api key
                ip:
                  type: string
                  description: "The ip of the server"
                port:
                  type: integer
                  description: "The port of the server"
                  default: 25565
              required:
                - api_key
                - ip
            example:
              api_key: "your api key"
              ip: "109.123.240.84"
              port: 25565
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      cracked:
                        type: boolean
                        description: If the server is cracked or not (null if unknown)
                      description:
                        type: string
                        description: The server description will include this string
                      online_players:
                        type: integer
                        description: The amount of online players
                      max_players:
                        type: integer
                        description: The max amount of players the server can hold
                      protocol:
                        type: integer
                        description: The protocol version of the server
                      last_seen:
                        type: integer
                        description: The unix timestamp when the server was last seen online
                      version:
                        type: string
                        description: The version of the server
                      players:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              description: The name of the player
                            uuid:
                              type: string
                              description: The uuid of the player
                            last_seen:
                              type: integer
                              description: The unix timestamp when the player was last seen online
                    example:
                      cracked: null
                      description: "A Minecraft Server"
                      last_seen: 1683760904
                      max_players: 20
                      online_players: 2
                      protocol: 762
                      version: "Spigot 1.19.4"
                      players:
                        - name: "DAMcraft"
                          uuid: "68af4d98-24a2-41b6-96bc-a9c2ef9b397b"
                          last_seen: 1683790506
                        - name: "Notch"
                          uuid: "069a79f4-44e9-4726-a5be-fca90e38aaf5"
                          last_seen: 1683789921
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                      type: string
                      description: The error message
        "429":
          description: Too many requests in the last 24 hours
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
        "504":
          description: Query took too long to execute and timed out
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
  /stats:
    get:
      summary: Get stats about ServerSeeker
      description: "Gives you stats about ServerSeeker. Somewhat inaccurate."
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                      server_count:
                        type: integer
                        description: The amount of servers in the database
                        example: 936207
                      player_history_count:
                        type: integer
                        description: The amount of players in the database
                        example: 42175558